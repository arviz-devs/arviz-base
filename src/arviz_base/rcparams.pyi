# File generated with docstub

import locale
import logging
import os
import pprint
import re
import sys
import types
from collections.abc import Callable, Iterable, Iterator, MutableMapping
from pathlib import Path
from typing import Any, Literal, get_args

import numpy as np
from _typeshed import Incomplete

_log: Incomplete

ScaleKeyword: Incomplete

def _make_validate_choice(
    accepted_values: Iterable, allow_none: bool = ..., typeof: type = ...
) -> Callable | None: ...
def _make_validate_choice_regex(
    accepted_values: Iterable, accepted_values_regex: Iterable, allow_none: bool = ...
) -> Callable: ...
def _validate_positive_int(value) -> None: ...
def _validate_float(value) -> None: ...
def _validate_str(value) -> None: ...
def _validate_probability(value) -> float: ...
def _validate_boolean(value) -> None: ...
def _add_none_to_validator(base_validator) -> None: ...
def _validate_stats_module(value: str | types.ModuleType) -> str | types.ModuleType: ...
def _validate_bokeh_marker(value) -> None: ...
def _validate_backend(value: Incomplete) -> None: ...
def make_iterable_validator(
    scalar_validator, length=..., allow_none=..., allow_auto=...
) -> Callable: ...

_validate_float_or_none: Incomplete
_validate_positive_int_or_none: Incomplete
_validate_dims: Incomplete

defaultParams: Incomplete

class RcParams(MutableMapping):

    validate: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...
    def __setitem__(self, key, val) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __delitem__(self, key) -> None: ...
    def clear(self) -> None: ...
    def pop(self, key, default=...) -> None: ...
    def popitem(self) -> tuple[Any, Any]: ...
    def setdefault(self, key, default=...) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __len__(self) -> int: ...
    def find_all(self, pattern) -> None: ...
    def copy(self) -> None: ...

def get_arviz_rcfile() -> None: ...
def read_rcfile(fname) -> None: ...
def rc_params(ignore_files=...) -> None: ...

rcParams: Incomplete

class rc_context:
    def __init__(self, rc: dict | None = ..., fname: str | None = ...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_value, exc_tb) -> None: ...
